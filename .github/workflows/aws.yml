name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: todo-list-app
  ECR_REGISTRY: 637423569589.dkr.ecr.ap-southeast-2.amazonaws.com
  ECS_SERVICE: todolistapp-service
  ECS_CLUSTER: todolist-cluster
  ECS_TASK_DEFINITION: task-def.json
  CONTAINER_NAME: todolist-app

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Print environment variables
      run: |
        echo "ECR_REGISTRY: $ECR_REGISTRY"
        echo "ECR_REPOSITORY: $ECR_REPOSITORY"
        echo "IMAGE_TAG: $IMAGE_TAG"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Set up QEMU for multi-architecture builds
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        # Set up Buildx
        docker buildx create --use
        # Build a docker container for amd64 architecture and
        # push it to ECR so that it can be deployed to ECS.
        docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Update ECS service network configuration
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --network-configuration '{
            "awsvpcConfiguration": {
              "subnets": ["subnet-006ac3329aa1d5d9a", "subnet-0e04072d03b780b0a", "subnet-02d90eb1dad5ce089"],
              "securityGroups": ["sg-0e92997243aad0339"],
              "assignPublicIp": "ENABLED"
            }
          }'
